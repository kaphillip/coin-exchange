{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","logo.svg","components/CoinHeader/CoinHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","AccountBalance","props","buttonText","showBalance","content","amount","action","method","onClick","event","preventDefault","toggleBalance","StyledTd","td","Coin","coinBalanceContent","showCoinBalanceHeader","balance","rank","name","ticker","price","handleRefresh","id","CoinList","coinBalanceHeader","className","coinData","map","CoinHeader","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","App","useState","toggleBalanceDisplay","setShowBalance","setCoinData","coinMarkCapCount","componentDidMount","a","rowCount","console","log","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","key","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a80a3928.chunk.js","sourcesContent":["//import React, { Component } from 'react'  //for class component use\r\nimport React from 'react';  //for functional component use\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section = styled.section `\r\n    border: 2px solid red;\r\n    font-size: 2rem;\r\n    padding: 1.5rem 0 1.5rem 5 rem;\r\n`\r\n\r\nexport default function AccountBalance(props){\r\n\r\n    const balanceClick = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.toggleBalance();\r\n    }\r\n\r\n    //to switch to show balance from hide balance, the showBalance in App.js must be false \r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n    let content = null;\r\n\r\n    if (props.showBalance) {\r\n        //to ensure correct jsx, make sure you use a react fragment\r\n        content = <>{props.amount}</>;\r\n    }\r\n    //original -- Balance: ${this.props.ammount}\r\n    return (\r\n        <>\r\n        <h2>\r\n            ACCOUNT BALANCE\r\n        </h2>\r\n        <Section>\r\n            Balance: ${content}\r\n            <form action=\"#\" method=\"POST\">\r\n            <button onClick={balanceClick}>{buttonText}</button>\r\n            </form>\r\n        </Section>\r\n        </>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n  amount: PropTypes.number.isRequired\r\n  ,showBalance: PropTypes.bool.isRequired\r\n}","//import React, { Component } from 'react'  //for class component use\r\nimport React from 'react';  //for functional component use\r\n//import './Coin.css';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n//removing use of .css file in favor of styled-components\r\n\r\nconst StyledTd = styled.td `\r\nborder: 1px solid #e9ebe4;\r\nwidth: 25vh;\r\n`\r\n\r\nexport default function Coin(props) {\r\n\r\n    const handleClick = (event) => {\r\n        // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.id);\r\n    }\r\n\r\n\r\n    let coinBalanceContent = null;\r\n\r\n    if (props.showCoinBalanceHeader) {\r\n        //to ensure correct jsx, make sure you use a react fragment\r\n        coinBalanceContent = <StyledTd>{props.balance}</StyledTd>;\r\n    }\r\n    //Better Solution - ignore logic above and use this below instead\r\n        //{this.props.toggleBalance ? <StyledTd>{this.props.balance}</StyledTd> : null}\r\n    return (\r\n        <tr>\r\n            <StyledTd>{props.rank}</StyledTd>\r\n            <StyledTd>{props.name}</StyledTd>\r\n            <StyledTd>{props.ticker}</StyledTd>\r\n            {coinBalanceContent}\r\n            <StyledTd>${props.price}</StyledTd>\r\n            <StyledTd>\r\n                <form action=\"#\" method=\"POST\">\r\n                <button onClick={handleClick}>Refresh</button>\r\n                </form>\r\n            </StyledTd>\r\n        </tr>\r\n        );\r\n}\r\n\r\n\r\nCoin.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    rank: PropTypes.number.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    balance: PropTypes.number.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}","//import React, { Component } from 'react'  //for class component use\r\nimport React from 'react';  //for functional component use\r\nimport PropTypes from 'prop-types';\r\nimport Coin from '../Coin/Coin';\r\n\r\nexport default function CoinList(props) {\r\n  let coinBalanceHeader = null;\r\n\r\n  if (props.showCoinBalanceHeader) {\r\n      //to ensure correct jsx, make sure you use a react fragment\r\n      coinBalanceHeader = <th>Balance</th>;\r\n  }\r\n\r\n  //Better Solution - ignore logic above and use this below instead\r\n    //{this.props.toggleBalance ? <th>Balance</th> : null}\r\n  return (\r\n      <table className=\"coin-table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Rank</th>\r\n          <th>Name</th>\r\n          <th>Ticker</th>\r\n          {coinBalanceHeader}\r\n          <th>Price</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.coinData.map( ({id, rank, name, ticker, balance, price}) =>\r\n          <Coin key={id} //should be key={key}\r\n                id={id}\r\n                handleRefresh={props.handleRefresh} \r\n                showCoinBalanceHeader={props.showCoinBalanceHeader}\r\n                rank={rank}\r\n                name={name} \r\n                ticker={ticker} \r\n                balance={balance}\r\n                price={price} />\r\n          )\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\nCoinList.propTypes = {\r\n    showCoinBalanceHeader: PropTypes.bool.isRequired\r\n  }\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\r\nimport logo from '../../../src/logo.svg';\r\n\r\n\r\nexport default class CoinHeader extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header className=\"App-header\">\r\n                    <img src={logo} alt=\"React logo\" className=\"App-logo\" />\r\n                    <h1 className=\"App-title\">\r\n                      COIN EXCHANGE\r\n                    </h1>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","//import React from 'react';\nimport React, {useState, useEffect} from 'react'; //no longer have to type \"React.\" + useEffect\nimport './App.css';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport CoinHeader from './components/CoinHeader/CoinHeader';\nimport axios from 'axios';\n\n // const COIN_COUNT = 10;\n  const formatPrice = price => parseFloat(Number(price).toFixed(2));\n\n  function App (props) {\n   //No longer needed\n   /* state = {\n      balance: 11000,\n      toggleBalanceDisplay: true,\n      coinData: [],\n      coinMarkCapCount: 10\n    }*/\n\n    //Below are React hooks to replace above\n    const [balance, setBalance] = useState(11000);\n    const [toggleBalanceDisplay, setShowBalance] = useState(true);\n    const [coinData, setCoinData] = useState([]);\n    const [coinMarkCapCount, setCoinMarkCapCount] = useState(10);\n\n//Will need to \"actively\" call componentDidMount for it to work in a functional environ vs class environ\n    //call logic in useEffect; use componentDidMount for async call\n    const componentDidMount = async () => {\n      const rowCount = coinMarkCapCount;\n      console.log(rowCount);\n      const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n      const coinIds = response.data.slice(0, rowCount).map(coin => coin.id);\n      const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n      const promises = coinIds.map(id => axios.get(tickerUrl + id));\n      const coinData = await Promise.all(promises);\n      const coinPriceData = coinData.map(function(response) {\n        const coin = response.data;\n        return {\n          key: coin.id, \n          id: coin.id,\n          name: coin.name,\n          ticker: coin.symbol,\n          rank: coin.rank,\n          balance: 0,\n          price: formatPrice(coin.quotes.USD.price)\n        };\n      })\n      //retrieve the prices here\n      //old version// this.setState({ coinData: coinPriceData });\n      setCoinData(coinPriceData);\n    }\n\n    useEffect(function() {\n      //we only want to call this and load data, IF AND ONLY IF, we need the data\n      if (coinData.length === 0) {\n        componentDidMount();\n      } \n      /* Not going to use this portion of logic\n      else { // component did update }*/\n    });\n\n    /*be careful with below, you must reference the entire state \"oldState\" when changing a value\n    otherwise you will overwrite the entire state with the new single value*/\n    //setState(oldState => ({...oldState, balance: 11200}));\n\n const handleRefresh = async (valueChangeId) => {\n    console.log(valueChangeId);\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    console.log(newPrice);\n\n    const newCoinData = /*this.state.*/coinData.map( function( values ) {\n      let newValues = { ...values }; //shallow copy\n      if ( valueChangeId === values.id) {\n        newValues.price = newPrice;\n        console.log(newValues.price);\n      }\n      return newValues;\n    });\n    console.log(newCoinData);\n    //this.setState({coinData: newCoinData});\n    setCoinData(newCoinData);\n  }\n\n   const toggleBalance = () => {\n      //Replace old logic with better logic + React hook logic\n      /*\n      let newBalanceDisplay = this.state.toggleBalanceDisplay.valueOf();\n      if ( newBalanceDisplay === true) { newBalanceDisplay = false; }\n      else { newBalanceDisplay = true; }\n      this.setState({toggleBalanceDisplay: newBalanceDisplay});*/\n      setShowBalance(oldValue => !oldValue);\n    }\n\n\n//Removing this.state. below since we have access to the functions in this module\n      return (\n        <div className=\"App\">\n          <CoinHeader />\n          <div>\n            <AccountBalance amount={balance} \n                            showBalance={toggleBalanceDisplay}\n                            toggleBalance={toggleBalance}/>\n            <CoinList coinData={coinData} \n                      handleRefresh={handleRefresh} \n                      showCoinBalanceHeader={toggleBalanceDisplay}/>\n          </div>\n        </div>\n      );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}